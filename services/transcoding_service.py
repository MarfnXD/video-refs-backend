"""
Servi√ßo de transcodifica√ß√£o de v√≠deo usando FFmpeg.

Converte v√≠deos para H.264 Baseline Profile (compat√≠vel com todos os dispositivos Android).
"""
import subprocess
import tempfile
import os
import uuid
import httpx
from pathlib import Path


class TranscodingService:
    def __init__(self, storage_dir: str = "/opt/render/project/videos"):
        """
        Args:
            storage_dir: Diret√≥rio de armazenamento persistente para v√≠deos transcodificados
        """
        self.storage_dir = Path(storage_dir)
        self.storage_dir.mkdir(parents=True, exist_ok=True)

    async def transcode_video(self, source_url: str) -> dict:
        """
        Baixa e transcodifica v√≠deo para H.264 Baseline Profile.

        Args:
            source_url: URL do v√≠deo original

        Returns:
            dict com:
                - success: bool
                - file_path: caminho do arquivo transcodificado
                - file_size_mb: tamanho do arquivo
                - error: mensagem de erro (se houver)
        """
        video_id = str(uuid.uuid4())
        temp_input = None
        output_path = self.storage_dir / f"{video_id}.mp4"

        try:
            print(f"üé¨ Iniciando transcodifica√ß√£o para: {video_id}")

            # 1. Baixar v√≠deo original
            print(f"üì• Baixando v√≠deo de: {source_url[:50]}...")
            temp_input = await self._download_video(source_url)

            if not temp_input or not os.path.exists(temp_input):
                raise ValueError("Falha ao baixar v√≠deo original")

            input_size_mb = os.path.getsize(temp_input) / (1024 * 1024)
            print(f"‚úÖ V√≠deo baixado: {input_size_mb:.2f} MB")

            # 2. Transcodificar para Baseline Profile
            print(f"üîÑ Transcodificando para H.264 Baseline...")
            await self._transcode_to_baseline(temp_input, str(output_path))

            if not output_path.exists():
                raise ValueError("Falha na transcodifica√ß√£o - arquivo n√£o foi gerado")

            output_size_mb = output_path.stat().st_size / (1024 * 1024)
            print(f"‚úÖ Transcodifica√ß√£o conclu√≠da: {output_size_mb:.2f} MB")

            return {
                "success": True,
                "file_path": str(output_path),
                "file_size_mb": round(output_size_mb, 2),
                "video_id": video_id,
            }

        except Exception as e:
            print(f"‚ùå Erro na transcodifica√ß√£o: {str(e)}")

            # Limpar arquivo de sa√≠da em caso de erro
            if output_path.exists():
                output_path.unlink()

            return {
                "success": False,
                "error": str(e),
            }

        finally:
            # Limpar arquivo tempor√°rio de entrada
            if temp_input and os.path.exists(temp_input):
                os.unlink(temp_input)

    async def _download_video(self, url: str, max_retries: int = 3) -> str:
        """
        Baixa v√≠deo para arquivo tempor√°rio com retry autom√°tico.

        Args:
            url: URL do v√≠deo
            max_retries: N√∫mero m√°ximo de tentativas (padr√£o: 3)
        """
        import asyncio

        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
        last_error = None

        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    wait_time = 2 ** attempt  # Exponential backoff: 2s, 4s, 8s
                    print(f"‚è≥ Retry {attempt + 1}/{max_retries} ap√≥s {wait_time}s...")
                    await asyncio.sleep(wait_time)

                async with httpx.AsyncClient(timeout=90.0) as client:  # Aumentado de 60s ‚Üí 90s
                    async with client.stream('GET', url) as response:
                        response.raise_for_status()

                        with open(temp_file.name, 'wb') as f:
                            async for chunk in response.aiter_bytes(chunk_size=8192):
                                f.write(chunk)

                print(f"‚úÖ V√≠deo baixado com sucesso (tentativa {attempt + 1})")
                return temp_file.name

            except Exception as e:
                last_error = e
                print(f"‚ö†Ô∏è Tentativa {attempt + 1}/{max_retries} falhou: {str(e)}")

                # Se n√£o √© a √∫ltima tentativa, continua
                if attempt < max_retries - 1:
                    continue

                # √öltima tentativa falhou - limpar e levantar erro
                if os.path.exists(temp_file.name):
                    os.unlink(temp_file.name)
                raise ValueError(f"Erro ao baixar v√≠deo ap√≥s {max_retries} tentativas: {str(last_error)}")

    async def _transcode_to_baseline(self, input_path: str, output_path: str):
        """
        Transcodifica v√≠deo para H.264 Baseline Profile usando FFmpeg.

        Par√¢metros otimizados para:
        - Compatibilidade universal com Android
        - Velocidade de transcodifica√ß√£o (preset: fast)
        - Tamanho de arquivo reduzido
        - Qualidade aceit√°vel para v√≠deos de refer√™ncia
        """
        try:
            # Verifica dura√ß√£o do v√≠deo antes de transcodificar
            duration = self._get_video_duration(input_path)
            if duration and duration > 180:  # 3 minutos
                raise ValueError(f"V√≠deo muito longo ({duration}s). M√°ximo: 180s. Use v√≠deos mais curtos.")

            result = subprocess.run(
                [
                    'ffmpeg',
                    '-i', input_path,

                    # Codec de v√≠deo: H.264 Baseline Profile
                    '-c:v', 'libx264',
                    '-profile:v', 'baseline',  # Compatibilidade universal
                    '-level', '3.0',           # Suporta at√© 720p

                    # Qualidade: CRF 23 (balan√ßo qualidade/tamanho)
                    '-crf', '23',

                    # Preset: fast (30-40% mais r√°pido que medium)
                    # Render Starter tem 0.5 CPU, ent√£o velocidade > compress√£o
                    '-preset', 'fast',

                    # Limita resolu√ß√£o m√°xima (reduz carga)
                    '-vf', 'scale=trunc(iw/2)*2:trunc(ih/2)*2',  # Garante dimens√µes pares

                    # Codec de √°udio: AAC
                    '-c:a', 'aac',
                    '-b:a', '128k',

                    # Otimiza√ß√µes
                    '-movflags', '+faststart',  # Streaming otimizado
                    '-pix_fmt', 'yuv420p',      # Compatibilidade de cor

                    # Sobrescrever sem perguntar
                    '-y',

                    output_path
                ],
                capture_output=True,
                text=True,
                timeout=600  # 10 minutos timeout (Render Starter √© lento)
            )

            if result.returncode != 0:
                raise ValueError(f"FFmpeg falhou: {result.stderr}")

            print(f"‚úÖ FFmpeg conclu√≠do com sucesso")

        except subprocess.TimeoutExpired:
            raise ValueError("Transcodifica√ß√£o excedeu tempo limite de 10 minutos")
        except Exception as e:
            raise ValueError(f"Erro ao executar FFmpeg: {str(e)}")

    def _get_video_duration(self, video_path: str) -> float:
        """Obt√©m dura√ß√£o do v√≠deo em segundos usando ffprobe."""
        try:
            result = subprocess.run(
                [
                    'ffprobe',
                    '-v', 'error',
                    '-show_entries', 'format=duration',
                    '-of', 'default=noprint_wrappers=1:nokey=1',
                    video_path
                ],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0 and result.stdout.strip():
                duration = float(result.stdout.strip())
                print(f"‚è±Ô∏è Dura√ß√£o do v√≠deo: {duration:.1f}s")
                return duration

            return None
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel obter dura√ß√£o: {str(e)}")
            return None

    def get_video_path(self, video_id: str) -> str:
        """Retorna caminho completo do v√≠deo transcodificado."""
        return str(self.storage_dir / f"{video_id}.mp4")

    def video_exists(self, video_id: str) -> bool:
        """Verifica se v√≠deo transcodificado existe."""
        path = self.storage_dir / f"{video_id}.mp4"
        return path.exists()

    def delete_video(self, video_id: str) -> bool:
        """Deleta v√≠deo transcodificado."""
        try:
            path = self.storage_dir / f"{video_id}.mp4"
            if path.exists():
                path.unlink()
                print(f"üóëÔ∏è V√≠deo deletado: {video_id}")
                return True
            return False
        except Exception as e:
            print(f"‚ùå Erro ao deletar v√≠deo {video_id}: {str(e)}")
            return False

    def get_storage_usage(self) -> dict:
        """Retorna estat√≠sticas de uso de armazenamento."""
        try:
            total_size = 0
            video_count = 0

            for file_path in self.storage_dir.glob("*.mp4"):
                total_size += file_path.stat().st_size
                video_count += 1

            total_mb = total_size / (1024 * 1024)

            return {
                "video_count": video_count,
                "total_size_mb": round(total_mb, 2),
                "storage_dir": str(self.storage_dir),
            }
        except Exception as e:
            print(f"‚ùå Erro ao calcular armazenamento: {str(e)}")
            return {
                "video_count": 0,
                "total_size_mb": 0,
                "storage_dir": str(self.storage_dir),
                "error": str(e),
            }
